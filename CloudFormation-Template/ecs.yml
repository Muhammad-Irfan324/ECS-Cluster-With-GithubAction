AWSTemplateFormatVersion: "2010-09-09"
Description: Custom VPC and ECS

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"
  PublicAZ1:
    Description: Public Subnet CIDR
    Type: String
    Default: "10.0.1.0/24"
  PublicAZ2:
    Description: Public Subnet CIDR
    Type: String
    Default: "10.0.3.0/24"    
  PrivateAZ:
    Description: Public Subnet CIDR
    Type: String
    Default: "10.0.2.0/24"
  AZ1:
    Description: Availability Zone
    Type: String
    Default: "us-east-1a" 
  AZ2:
    Description: Availability Zone
    Type: String
    Default: "us-east-1b"     
  ECRImageURI:
    Description: ECR Image URI
    Type: String
    Default: "346187401510.dkr.ecr.us-east-1.amazonaws.com/node-hello-world:latest"

Resources:
  # Create VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Create Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicAZ1
      AvailabilityZone: !Ref AZ1
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicAZ2
      AvailabilityZone: !Ref AZ2
      MapPublicIpOnLaunch: true
  # Create Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateAZ
      AvailabilityZone: !Ref AZ1
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway    

# Route Table Entry For Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable      

# NAT Gateway
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1     

# Route Table For Private Subnet 
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

# Create an IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

# Create an ECS Task Definition 
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "hello-world"
      NetworkMode: "awsvpc"
      Memory: 0.5GB
      Cpu: '256'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
           - "FARGATE"
      ContainerDefinitions:
        - Name: "hello-world"
          Image: !Ref ECRImageURI
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
               - Name: SECRET_VALUE
                 Value: secret-value
               - Name: PORT
                 Value: "80"

# Create ECS Cluster Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ECS tasks"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

# Create ALB Cluster Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

# Create ECS Cluster
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "HelloWorldCluster"

# Create an ALB
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
         - "PublicSubnetRouteTableAssociation1"
         - "PublicSubnetRouteTableAssociation2"
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ALBSecurityGroup

# Create a Target Group
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: "200"
      VpcId: !Ref MyVPC
      

# Create an ALB Listener
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

# Create an ECS Service
  MyECSService:
    Type: AWS::ECS::Service
    DependsOn:
         - "MyListener"
    Properties:
      ServiceName: "hello-world-service"
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: "FARGATE"
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups: 
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: "hello-world" 
          ContainerPort: 80 
          TargetGroupArn: !Ref MyTargetGroup 

# ALB DNS NAME
Outputs:
  ALBDNSName:
    Description: ALB DNS Name
    Value: !GetAtt MyALB.DNSName          